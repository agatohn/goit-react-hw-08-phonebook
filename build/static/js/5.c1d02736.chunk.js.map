{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/regForm/RegForm.module.css","components/regForm/RegForm.js","pages/regPage/RegPage.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","Regform","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","target","className","style","formWrapper","formName","form","onSubmit","e","preventDefault","authOperations","register","autoComplete","formLabel","formInput","type","onChange","formBtn","regPage"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,YAAc,6BAA6B,KAAO,sBAAsB,UAAY,2BAA2B,UAAY,2BAA2B,QAAU,yBAAyB,SAAW,4B,2ICIvM,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,cAEXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUT,EAAoB,EAApBA,KAAMT,EAAc,EAAdA,MACtC,OAAQS,GACN,IAAK,OACH,OAAOC,EAAQV,GACjB,IAAK,QACH,OAAOY,EAASZ,GAClB,IAAK,WACH,OAAOc,EAAYd,GACrB,QACE,SAcN,OACE,sBAAKmB,UAAWC,IAAMC,YAAtB,UACE,oBAAIF,UAAWC,IAAME,SAArB,+BACA,uBAAMH,UAAWC,IAAMG,KAAMC,SATZ,SAACC,GACpBA,EAAEC,iBACFX,EAASY,IAAeC,SAAS,CAAEnB,OAAME,QAAOE,cANhDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAW2Ce,aAAa,MAAlE,UACE,wBAAOV,UAAWC,IAAMU,UAAxB,iBAEE,uBACEX,UAAWC,IAAMW,UACjBC,KAAK,OACLvB,KAAK,OACLT,MAAOS,EACPwB,SAAUhB,OAId,wBAAOE,UAAWC,IAAMU,UAAxB,kBAEE,uBACEX,UAAWC,IAAMW,UACjBC,KAAK,QACLvB,KAAK,QACLT,MAAOW,EACPsB,SAAUhB,OAId,wBAAOE,UAAWC,IAAMU,UAAxB,qBAEE,uBACEX,UAAWC,IAAMW,UACjBC,KAAK,WACLvB,KAAK,WACLT,MAAOa,EACPoB,SAAUhB,OAId,wBAAQE,UAAWC,IAAMc,QAASF,KAAK,SAAvC,2BCrEO,SAASG,IACtB,OACE,mCACE,cAAC,EAAD","file":"static/js/5.c1d02736.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"RegForm_formWrapper__3usqS\",\"form\":\"RegForm_form__2kueY\",\"formLabel\":\"RegForm_formLabel__iG8lj\",\"formInput\":\"RegForm_formInput__29jLG\",\"formBtn\":\"RegForm_formBtn__3Pyic\",\"formName\":\"RegForm_formName__3-X4-\"};","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { authOperations } from \"../../redux/authorization/index\";\nimport style from \"./RegForm.module.css\";\n\nexport default function Regform() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case \"name\":\n        return setName(value);\n      case \"email\":\n        return setEmail(value);\n      case \"password\":\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n  const resetForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <div className={style.formWrapper}>\n      <h2 className={style.formName}>Registration form</h2>\n      <form className={style.form} onSubmit={handleSubmit} autoComplete=\"off\">\n        <label className={style.formLabel}>\n          Name\n          <input\n            className={style.formInput}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label className={style.formLabel}>\n          Email\n          <input\n            className={style.formInput}\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label className={style.formLabel}>\n          Password\n          <input\n            className={style.formInput}\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button className={style.formBtn} type=\"submit\">\n          Sign up\n        </button>\n      </form>\n    </div>\n  );\n}\n","import RegForm from \"../../components/regForm/RegForm\";\n\nexport default function regPage() {\n  return (\n    <>\n      <RegForm />\n    </>\n  );\n}\n\n// import { useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { authOperations } from \"../../redux/authorization/index\";\n\n// export default function RegPage() {\n//   const [name, setName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const dispatch = useDispatch();\n\n//   const handleChange = ({ target: { name, value } }) => {\n//     switch (name) {\n//       case \"name\":\n//         return setName(value);\n//       case \"email\":\n//         return setEmail(value);\n//       case \"password\":\n//         return setPassword(value);\n//       default:\n//         return;\n//     }\n//   };\n//   const resetForm = () => {\n//     setName(\"\");\n//     setEmail(\"\");\n//     setPassword(\"\");\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     dispatch(authOperations.register({ name, email, password }));\n//     resetForm();\n//   };\n\n//   return (\n//     <div>\n//       <h2>Registration form</h2>\n//       <form onSubmit={handleSubmit} autoComplete=\"off\">\n//         <label>\n//           Name\n//           <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n//         </label>\n\n//         <label>\n//           Email\n//           <input\n//             type=\"email\"\n//             name=\"email\"\n//             value={email}\n//             onChange={handleChange}\n//           />\n//         </label>\n\n//         <label>\n//           Password\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             value={password}\n//             onChange={handleChange}\n//           />\n//         </label>\n\n//         <button type=\"submit\">Sign up</button>\n//       </form>\n//     </div>\n//   );\n// }\n"],"sourceRoot":""}